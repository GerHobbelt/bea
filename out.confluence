
h1.

h2.JOpenCV: OpenCV + V8

h2.What is OpenCV ?
	'Open source Computer Vision' library: http://opencv.willowgarage.com/wiki/
	BSD License

h2.What is V8 ?
	Google V8 Javascript engine: http://code.google.com/p/v8/
	BSD License

h2.What is JOpenCV?
	JOpenCV is a library which binds the opencv library to javascript through Google's V8 javascript engine.
	This allows writing opencv applications in Javascript.
	BSD License ?

h2.What can be done with it ?
	* Video capturing
	* Video processing
	* Special effects
	* Motion detection
	* Object detection
	* Facial recognition
	* Drawing (including on video)
	* Text output
	*in Javascript*

h2.Why Javascript ?
	* Most popular, extremely flexible programming language
	* One of the fastest interpreted languages, due to V8
	* No recompiles, changes can be made and seen in realtime
	* Scripts can be transferred through the network
	* Easy to publish/distribute script source code, easy to involve the community

h2.Is it fast ?
	Very fast. There is a small overhead with arguments conversion from Javascript to C++ and vice-versa,
	but most of the heavy lifting is done by the native opencv library.
	Google V8 *compiles* javascript into native code (no VM) so execution of javascript code is very fast.
	So it can be argued that JOpenCV javascript applications are (almost) as fast as native opencv applications, written in C++.

h2.What platforms are supported?
	* Linux
	* Windows
	* Mac OS X
	* FreeBSD
	* Android

h2.Documentation ?
	The supported API is virtually identical to the C++ API, properly documented here: http://opencv.willowgarage.com/documentation/cpp/index.html
	There are some subtle differences, as well as a few Javascript-specific functions, documented in the JOpenCV API.

h2.How much of OpenCV is supported ?
	JOpenCV exposes all the 'practical' OpenCV functions. Some convenience classes provided by OpenCV are not ported, as they are mostly syntactic sugar and
	similar results can be achieved through plain Javascript.

h2.Usage example ?
{newcode:CPP|title=Capture video from webcam and process it with the script in argv[1]}
	#include "jopencv.h"
	//Link with jopencv.lib
	int main(int argc, char** argv){
		if (argc < 2){
			std::cout << "Please specify a javascript file to run" << std::endl;
			return -1;
		}
		jopencv::WebcamProcessor &wp = *jopencv::WebcamProcessor::Create(argv[1]);
		//Runs the script and monitors changes to the javascript file, reloading it if changed
		wp.process(0, 320, 240);
		return 0;
	}{newcode}
h2.Can I process raw video, without capturing from webcam ?
	Yes:
{newcode:CPP|title=Process raw video}
		int main(int argc, char* argv[]){
			//....
			//Load the script from argv[1]
			jopencv::ScriptLoader& sl = *jopencv::ScriptLoader::Create(argv[1]);
			//width, height, format - most pixel formats supported
			sl.init(640, 480, 16);
			unsigned char *inframe = allocateFrame();
			unsigned char *outframe = allocateFrame();
			for (;;){
				//Get a frame from your video source
				MyVideoSource->getFrame(inframe);
				//Process the frame in the script
				sl.processFrame(inframe, outframe);
			}
		}{newcode}
h2.How does the script look like ?
{newcode:javascript|title=Minmum script}
	var cv = JOpenCV;
	function init(width, height, format){
		//Initialize your script here
	}
	function processFrame(frameIn, frameOut){
		//Transform frameIn and store the result in frameOut
	}{newcode}
h2.Example scripts ?
{newcode:javascript|title=Samples}
	//Copy input frame to output frame:
	function processFrame(frameIn, frameOut){
		frameIn.copyTo(frameOut);
	}
	//Apply bitwise_not on frameIn, store in frameOut
	function efNegative(frameIn, frameOut){
		cv.bitwise_not(frameIn, frameOut);
	}
	//Convert color to black and white
	function efBlackAndWhite(frameIn, frameOut){
		cv.cvtColor(frameIn, frameOut, CV_RGB2GRAY);
	}
	//Run image processing effects
	function efEdges(frameIn, frameOut){
		cv.cvtColor(frameIn, frameOut, CV_BGR2GRAY);
		cv.GaussianBlur(frameOut, frameOut, {width: 7, height: 7}, 1.5, 1.5);
		cv.Canny(frameOut, frameOut, 3, 7);
	}{newcode}
